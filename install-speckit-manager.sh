#!/bin/bash
# Spec-Kit Manager Installation Script
# This script installs speckit-manager as a global command

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get the absolute path of the project directory
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SPECKIT_SCRIPT="$PROJECT_DIR/src/bin/speckit-manager"

echo -e "${BLUE}üöÄ Installing Spec-Kit Manager...${NC}"

# Check if Python 3 is available
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}‚ùå Error: Python 3 is not installed or not in PATH${NC}"
    exit 1
fi

# Check if the speckit-manager script exists
if [ ! -f "$SPECKIT_SCRIPT" ]; then
    echo -e "${RED}‚ùå Error: speckit-manager script not found at $SPECKIT_SCRIPT${NC}"
    exit 1
fi

# Install Python dependencies
echo -e "${YELLOW}üì¶ Installing Python dependencies...${NC}"
if [ -f "$PROJECT_DIR/src/bin/requirements.txt" ]; then
    pip3 install -r "$PROJECT_DIR/src/bin/requirements.txt" --user
    echo -e "${GREEN}‚úÖ Dependencies installed${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  No requirements.txt found, skipping dependency installation${NC}"
fi

# Determine installation directory
if [[ "$OSTYPE" == "darwin"* ]]; then
    # macOS
    INSTALL_DIR="$HOME/.local/bin"
elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Linux
    INSTALL_DIR="$HOME/.local/bin"
else
    # Other Unix-like systems
    INSTALL_DIR="$HOME/.local/bin"
fi

# Create installation directory if it doesn't exist
mkdir -p "$INSTALL_DIR"

# Create the wrapper script
WRAPPER_SCRIPT="$INSTALL_DIR/speckit-manager"

echo -e "${YELLOW}üìù Creating wrapper script at $WRAPPER_SCRIPT...${NC}"

cat > "$WRAPPER_SCRIPT" << EOF
#!/bin/bash
# Spec-Kit Manager Wrapper Script
# Auto-generated by install-speckit-manager.sh

# Project directory (absolute path)
PROJECT_DIR="$PROJECT_DIR"
SPECKIT_SCRIPT="\$PROJECT_DIR/src/bin/speckit-manager"

# Check if the original script exists
if [ ! -f "\$SPECKIT_SCRIPT" ]; then
    echo "Error: speckit-manager script not found at \$SPECKIT_SCRIPT"
    echo "Please ensure the project is in the correct location: \$PROJECT_DIR"
    exit 1
fi

# Execute the Python script with all arguments
exec python3 "\$SPECKIT_SCRIPT" "\$@"
EOF

# Make the wrapper script executable
chmod +x "$WRAPPER_SCRIPT"

# Check if the installation directory is in PATH
if [[ ":$PATH:" != *":$INSTALL_DIR:"* ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  $INSTALL_DIR is not in your PATH${NC}"
    echo -e "${BLUE}üìã To use speckit-manager from anywhere, add this to your shell profile:${NC}"
    echo ""
    
    # Detect shell and provide appropriate instructions
    if [[ "$SHELL" == *"zsh"* ]]; then
        SHELL_RC="$HOME/.zshrc"
        echo -e "${GREEN}# Add to $SHELL_RC:${NC}"
        echo "export PATH=\"$INSTALL_DIR:\$PATH\""
    elif [[ "$SHELL" == *"bash"* ]]; then
        SHELL_RC="$HOME/.bashrc"
        echo -e "${GREEN}# Add to $SHELL_RC:${NC}"
        echo "export PATH=\"$INSTALL_DIR:\$PATH\""
    else
        echo -e "${GREEN}# Add to your shell profile:${NC}"
        echo "export PATH=\"$INSTALL_DIR:\$PATH\""
    fi
    
    echo ""
    echo -e "${BLUE}Or run this command to add it automatically:${NC}"
    if [[ "$SHELL" == *"zsh"* ]]; then
        echo "echo 'export PATH=\"$INSTALL_DIR:\$PATH\"' >> ~/.zshrc && source ~/.zshrc"
    elif [[ "$SHELL" == *"bash"* ]]; then
        echo "echo 'export PATH=\"$INSTALL_DIR:\$PATH\"' >> ~/.bashrc && source ~/.bashrc"
    else
        echo "echo 'export PATH=\"$INSTALL_DIR:\$PATH\"' >> ~/.profile && source ~/.profile"
    fi
    
    # Offer to add to PATH automatically
    echo ""
    read -p "Would you like to add $INSTALL_DIR to your PATH automatically? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        if [[ "$SHELL" == *"zsh"* ]]; then
            echo "export PATH=\"$INSTALL_DIR:\$PATH\"" >> ~/.zshrc
            echo -e "${GREEN}‚úÖ Added to ~/.zshrc${NC}"
        elif [[ "$SHELL" == *"bash"* ]]; then
            echo "export PATH=\"$INSTALL_DIR:\$PATH\"" >> ~/.bashrc
            echo -e "${GREEN}‚úÖ Added to ~/.bashrc${NC}"
        else
            echo "export PATH=\"$INSTALL_DIR:\$PATH\"" >> ~/.profile
            echo -e "${GREEN}‚úÖ Added to ~/.profile${NC}"
        fi
        echo -e "${YELLOW}üîÑ Please restart your terminal or run: source ~/.zshrc (or ~/.bashrc)${NC}"
    fi
else
    echo -e "${GREEN}‚úÖ $INSTALL_DIR is already in your PATH${NC}"
fi

echo ""
echo -e "${GREEN}üéâ Installation completed successfully!${NC}"
echo ""
echo -e "${BLUE}üìã Usage:${NC}"
echo "  speckit-manager --help                    # Show help"
echo "  speckit-manager init --name my-project    # Initialize project"
echo "  speckit-manager constitution              # Create constitution"
echo "  speckit-manager specify --feature auth    # Create specification"
echo ""
echo -e "${BLUE}üß™ Test the installation:${NC}"
echo "  speckit-manager --version"
echo ""

# Test if the command works
if command -v speckit-manager &> /dev/null; then
    echo -e "${GREEN}‚úÖ speckit-manager is now available as a global command!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  You may need to restart your terminal or update your PATH${NC}"
fi