xbot.web
!
描述：
对web网页进行各式操作，如打开网页、关闭网页
方法
create()
打开网页

create(url, mode='cef' ,load_timeout=20, stop_if_timeout=False, silent_running=False, executable_path=None, arguments=None)

输入参数

url：目标网址

mode：浏览器类型。目前支持的浏览器有：

mode值

解释

'cef'

影刀浏览器（默认值）

'chrome'

Google Chrome浏览器

'ie'

Internet Explorer浏览器

'edge'

Microsoft Edge浏览器

'360se'

360安全浏览器

%localappdata%\shadowbot\ChromiumBrowser.config 文件中的ProductName

自定义浏览器 / 指纹浏览器

load_timeout：等待加载超时时间，默认超时时间20s，若超时未加载完毕则抛出UIAError异常

stop_if_timeout：网页加载超时是否停止加载网页，默认为 False（不停止加载）

silent_running：是否开启运行时不抢占鼠标键盘，默认为 False

executable_path：浏览器执行文件路径，默认为None使用默认值

arguments：命令行参数，必须是目标浏览器支持的命令行，默认为None

返回值

WebBrowser：返回打开的网页对象

示例1

from xbot import web
def main(args):
    web_object = web.create('www.baidu.com', 'chrome', load_timeout=20)
复制
该示例执行逻辑： 使用Chrome浏览器打开 百度官网

get()
根据网址或标题获取网页

get(title=None, url=None, mode='cef', load_timeout=20, use_wildcard=False, stop_if_timeout=False, open_page=False, page_url=None, silent_running=False)

输入参数

title：网页标题

url：网址

mode：浏览器类型。目前支持的浏览器有，%localappdata%\shadowbot\ChromiumBrowser.config 文件中的ProductName

mode值

解释

'cef'

影刀浏览器（默认值）

'chrome'

Google Chrome浏览器

'ie'

Internet Explorer浏览器

'edge'

Microsoft Edge浏览器

'360se'

360安全浏览器

%localappdata%\shadowbot\ChromiumBrowser.config 文件中的ProductName

自定义浏览器 / 指纹浏览器

load_timeout：等待加载超时时间，默认超时时间20s，若超时未加载完毕则抛出UIAError异常

use_wildcard：是否使用通配符方式匹配，默认为False（不使用）。若为 True 匹配到多个网页时，返回最新打开的网页

stop_if_timeout：等待加载超时时间，默认超时时间20s，若超时未加载完毕则抛出UIAError异常

open_page：根据url或title匹配失败时，是否打开新的网页，默认为False（不打开）

page_url：open_page=True时，指定打开的网页地址

silent_running：是否开启运行时不抢占鼠标键盘，默认为 False

返回值

WebBrowser：返回获取到的网页对象

示例1

from xbot import web

def main(args):
    web_object = web.get('百度', None, 'chrome', load_timeout=20, use_wildcard=False)
复制
该示例执行逻辑： 使用模糊匹配在Chrome浏览器中查找标题开头为 百度 的网页对象

示例2

from xbot import web

def main(args):
    web_object = web.get('百度*', None, 'chrome', load_timeout=20, use_wildcard=True)
复制
该示例执行逻辑： 使用通配符在Chrome浏览器中查找标题开头为 百度 的网页对象

get_active()
获取当前选中或激活的网页

get_active(mode='cef', load_timeout=20, stop_if_timeout=False, silent_running=False)

输入参数

mode：浏览器类型。目前支持的浏览器有：

mode值

解释

'cef'

影刀浏览器（默认值）

'chrome'

Google Chrome浏览器

'ie'

Internet Explorer浏览器

'edge'

Microsoft Edge浏览器

'360se'

360安全浏览器

%localappdata%\shadowbot\ChromiumBrowser.config 文件中的ProductName

自定义浏览器 / 指纹浏览器

load_timeout：等待加载超时时间，默认超时时间20s，若超时未加载完毕则抛出UIAError异常

stop_if_timeout：等待加载超时时间，默认超时时间20s，若超时未加载完毕则抛出UIAError异常

silent_running：是否开启运行时不抢占鼠标键盘，默认为 False

返回值

WebBrowser：返回获取到的网页对象

示例1

from xbot import web
def main(args):
    web_object = web.get_active('chrome', load_timeout=20)
复制
该示例执行逻辑： 获取Chrome浏览器当前激活的网页对象

get_all()
获取所有网页

get_all(mode='cef', title=None, url=None, use_wildcard=False, silent_running=False)

输入参数

mode：浏览器类型。目前支持的浏览器有：

mode值

解释

'cef'

影刀浏览器（默认值）

'chrome'

Google Chrome浏览器

'ie'

Internet Explorer浏览器

'edge'

Microsoft Edge浏览器

'360se'

360安全浏览器

%localappdata%\shadowbot\ChromiumBrowser.config 文件中的ProductName

自定义浏览器 / 指纹浏览器

title：网页标题

url：网址

use_wildcard：是否使用通配符方式匹配，默认为False（不使用）。若为 True 匹配到多个网页时，返回最新打开的网页

silent_running：是否开启运行时不抢占鼠标键盘，默认为 False

返回值

WebBrowser：返回获取到的网页对象

返回值

List[WebBrowser]：返回网页对象列表

示例1

from xbot import web

def main(args):
    web_objects = web.get_all('chrome')
复制
该示例执行逻辑： 获取Chrome浏览器当前打开的全部网页对象

get_cookies()
获取浏览器Cookie信息

get_cookies(mode='cef' , url=None, name=None, domain=None, path=None)

输入参数

mode：浏览器类型。目前支持的浏览器有：

mode值

解释

'cef'

影刀浏览器（默认值）

'chrome'

Google Chrome浏览器

'ie'

Internet Explorer浏览器

'edge'

Microsoft Edge浏览器

'360se'

360安全浏览器

%localappdata%\shadowbot\ChromiumBrowser.config 文件中的ProductName

自定义浏览器 / 指纹浏览器

url：根据给定的url找到相应的cookie，如：url='https://www.yingdao.com'，即获取该网页的cookie。默认值为None

name：根据 cookie 的 name 来筛选cookie，默认值为None

domain：根据 cookie 的 domain 来筛选cookie，默认值为None

path：根据 cookie 的 path 来筛选cookie，默认值为None

返回值

List[dict]：返回筛选到的cookie列表, 列表项为字典

示例1

获取chrome浏览器的cookie信息

from xbot import web

def main(args):
    get_explorer_cookie('cef')
    pass

def get_explorer_cookie(mode):
    # 获取浏览器 cookie
    cookie_list = web.get_cookies(mode)
    print(cookie_list)
    for cookie in cookie_list:
        print(cookie['name'] + '    '+cookie['value'])
复制
该示例执行逻辑： 获取影刀浏览器下的所有cookie --> 打印筛选出的 cookie 所有字段

get_cookies_v2()
获取浏览器Cookie信息，支持 PartitionKey

get_cookies_v2(mode='cef', name=None, url=None, domain=None, path=None, partition_key=None, secure=None, session=None)

输入参数

mode：浏览器类型。目前支持的浏览器有：

mode值

解释

'cef'

影刀浏览器（默认值）

'chrome'

Google Chrome浏览器

'ie'

Internet Explorer浏览器

'edge'

Microsoft Edge浏览器

'360se'

360安全浏览器

'firefox'

FireFox浏览器

%localappdata%\shadowbot\ChromiumBrowser.config 文件中的ProductName

自定义浏览器 / 指纹浏览器

name：根据给定的 name 筛选cookie, 值为空则忽略 name 筛选条件，默认值为None

url：根据给定的 URL 比如 'https://www.winrobot360.com' 筛选cookie, 值为空则忽略 url筛选条件(IE 不能为空)，默认值为None

domain：根据 cookie 的 domain 来筛选cookie，默认值为None

path：根据 cookie 的 path 来筛选cookie，默认值为None

partition_key：根据 cookie 的 partition key 来筛选cookie，默认值为None

secure：secure, 不传为 None 则忽略，不根据是否 secure 过滤 Cookie 集合, True 则获取 secure Cookie 集合, False 则获取非 secure Cookie 集合, 浏览器类型为IE则忽略该参数

session：session, 不传为 None 则忽略，不根据是否为会话 Cookie 过滤 Cookie 集合，True 则获取会话 Cookie 集合, False 则获取永久性 Cookie 集合, 浏览器类型为IE则忽略该参数

返回值

List[dict]：返回筛选到的cookie列表, 列表项为字典

示例1

获取chrome浏览器中PartitionKey为'https://taobao.com'的cookie信息

from xbot import web

def main(args):
    get_explorer_cookie('chrome')
    pass

def get_explorer_cookie(mode):
    # 获取浏览器 cookie
    cookie_list = web.get_cookies(mode, partition_key="https://taobao.com")
    print(cookie_list)
    for cookie in cookie_list:
        print(cookie['name'] + '    '+cookie['value'])
复制
set_cookie()
设置浏览器Cookie信息

set_cookie(url, mode='cef', name=None ,value=None, sessionCookie=True, expires=100, domain=None, path=None, httpOnly=False, secure=False):

输入参数

url：根据给定的 URL 比如 'https://www.winrobot360.com' 设置cookie, 该参数必填

mode：浏览器类型。目前支持的浏览器有：

mode值

解释

'cef'

影刀浏览器（默认值）

'chrome'

Google Chrome浏览器

'ie'

Internet Explorer浏览器

'edge'

Microsoft Edge浏览器

'360se'

360安全浏览器

'firefox'

FireFox浏览器

%localappdata%\shadowbot\ChromiumBrowser.config 文件中的ProductName

自定义浏览器 / 指纹浏览器



name：根据给定的 name 设置cookie, 该参数必填

value：根据给定的 value 设置cookie, 值为空则忽略，默认值为None

domain：根据给定的 domain 设置cookie，默认值为None

path：根据给定的 path 设置cookie，默认值为None

sessionCookie：默认为 True，设置为会话 cookie，浏览器关闭后失效。False 则设置为持久化 cookie，需要指定 cookie 有效期

expires：持久化 cookie 需要设置有效期（cookie 生效到失效的时间间隔，单位为秒），默认 100s

secure：设置该 cookie 是否被标记为 Secure，默认为 False

session：设置该 cookie 是否被标记为 HttpOnly，默认为 False

示例1

设置chrome浏览器https://www.baidu.com网址name="test"的cookie

from xbot import web

def main(args):
    web.set_cookie('https://www.baidu.com', mode="chrome", name="test")
    pass
复制
remove_cookie()
获取浏览器Cookie信息移除通过 cookie url、 cookie name 指定的 cookie

remove_cookie(url, name, mode='cef')

输入参数

mode：浏览器类型。目前支持的浏览器有：

mode值

解释

'cef'

影刀浏览器（默认值）

'chrome'

Google Chrome浏览器

'ie'

Internet Explorer浏览器

'edge'

Microsoft Edge浏览器

'firefox'

FIrefox浏览器

%localappdata%\shadowbot\ChromiumBrowser.config 文件中的ProductName

自定义浏览器 / 指纹浏览器

cookie url：将被移除的 cookie url

cookie name：将被移除的 cookie 名称

示例1

移除edge浏览器的“BIDUPSID”百度网站的cookie信息

from xbot import web

def main(args):
    web.remove_cookie('https://www.baidu.com', 'BIDUPSID', 'edge')
    pass
复制
该示例执行逻辑： 使用remove_cookie函数 --> 移除edge浏览器的名为“BIDUPSID”百度网站cookie信息

close_all()
关闭所有网页

close_all(mode='cef' , task_kill=False )

输入参数

mode：浏览器类型。目前支持的浏览器有：

mode值

解释

'cef'

影刀浏览器（默认值）

'chrome'

Google Chrome浏览器

'ie'

Internet Explorer浏览器

'edge'

Microsoft Edge浏览器

'360se'

360安全浏览器

%localappdata%\shadowbot\ChromiumBrowser.config 文件中的ProductName

自定义浏览器 / 指纹浏览器

task_kill：是否终止浏览器进程，默认为 False（不终止）

返回值

无

示例1

from xbot import web

def main(args):
    web.close_all('chrome')
复制
该示例执行逻辑： 关闭Chrome浏览器当前打开的全部网页

handle_save_dialog()
处理网页下载对话框

handle_save_dialog(file_folder, dialog_result='ok', mode='cef',  * , file_name=None,wait_appear_timeout=20,focus_timeout=600)

输入参数

file_folder：文件保存路径

dialog_result：点击下载对话框中按钮。'ok'为确认下载 'cancel' 为取消下载

mode：浏览器类型。目前支持的浏览器有：

mode值

解释

'cef'

影刀浏览器（默认值）

'chrome'

Google Chrome浏览器

'ie'

Internet Explorer浏览器

'edge'

Microsoft Edge浏览器

'360se'

360安全浏览器

%localappdata%\shadowbot\ChromiumBrowser.config 文件中的ProductName

自定义浏览器 / 指纹浏览器

file_name：保存文件名，默认值为 None（为下载资源生成不重复的文件名）

wait_appear_timeout：等待对话框出现超时时间, 默认20s, 如果下载对话框加载超时则抛出UIAError的异常

focus_timeout：焦点超时时间(对话框出现和输入操作的间隔)，默认600ms

返回值

无

示例1

from xbot import web

def main(args):
    web.handle_save_dialog('D:\\', 'ok', 'chrome', file_name='123.txt', wait_appear_timeout=20)
复制
该示例执行逻辑： 在Chrome浏览器中处理下载对话框，并将目标目标文件重命名为 "123.txt" 并保存到D盘根目录下

handle_upload_dialog()
处理网页上传对话框

handle_upload_dialog(filename, dialog_result='ok', mode='cef',  * , wait_appear_timeout=20)

输入参数

file_folder：文件保存路径

dialog_result：点击下载对话框中按钮。'ok'为确认下载 'cancel' 为取消下载

mode：浏览器类型。目前支持的浏览器有：

mode值

解释

'cef'

影刀浏览器（默认值）

'chrome'

Google Chrome浏览器

'ie'

Internet Explorer浏览器

'edge'

Microsoft Edge浏览器

'360se'

360安全浏览器

%localappdata%\shadowbot\ChromiumBrowser.config 文件中的ProductName

自定义浏览器 / 指纹浏览器

wait_appear_timeout：等待对话框出现超时时间, 默认20s, 如果下载对话框加载超时则抛出UIAError的异常

返回值

无

示例1

from xbot import web

def main(args):
    web.handle_upload_dialog('D:\\123.txt', 'ok', 'chrome', wait_appear_timeout=20)
复制
该示例执行逻辑： 在Chrome浏览器中处理网页上传对话框，上传 D:\123.text 文件