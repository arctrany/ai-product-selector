xbot.web.Browser
!
描述：
对网页元素、网页进行的各种处理，如网页激活、获取网页标题、网页重新加载、取消网页加载
方法
get_url()
获取网址

get_url(self)

输入参数

无

返回值

str：返回网页地址

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    url = browser.get_url()
复制
该示例执行逻辑： 获取已打开的网页对象 --> 获取url地址

get_title()
获取标题

get_title(self)

输入参数

无

返回值

str：返回网页标题

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    title = browser.get_title()
复制
该示例执行逻辑： 获取已打开的网页对象 --> 获取标题

get_text()
获取网页的文本内容

get_text(self)

输入参数

无

返回值

str：返回网页文本内容

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    text = browser.get_text()
复制
该示例执行逻辑： 获取已打开的网页对象 --> 获取当前激活网页的文本内容

get_html()
获取网页的html

get_html(self)

输入参数

无

返回值

str：返回网页的html

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    html = browser.get_html()
复制
该示例执行逻辑： 获取已打开的网页对象 --> 获取当前激活网页的html

activate()
激活目标网页

activate(self)

输入参数

无

返回值

无

示例1

from xbot import web


def main(args):
    browser = web.get('百度', None, 'chrome')
    browser.activate()
复制
该示例执行逻辑： 获取标题为百度的网页对象 --> 激活该网页

navigate()
跳转到新网页

navigate(self, url, load_timeout=20)

输入参数

url：新网页地址

load_timeout：等待加载超时时间，默认超时时间20s，若超时未加载完毕则抛出UIAError异常

返回值

无

示例1

from xbot import web


def main(args):
    browser = web.get('百度', None, 'chrome')
    browser.navigate('www.taobao.com')
复制
该示例执行逻辑： 获取标题为百度的网页对象 --> 将该网页跳转到 淘宝 网页

go_back()
网页后退

go_back(self, load_timeout=20)

输入参数

load_timeout：等待加载超时时间，默认超时时间20s，若超时未加载完毕则抛出UIAError异常

返回值

无

示例1

from xbot import web


def main(args):
    browser = web.get('淘宝', None, 'chrome')
    browser.go_back()
复制
该示例执行逻辑： 获取标题为 淘宝 的网页并后退

go_forward()
网页前进

go_forward(self, load_timeout=20)

输入参数

load_timeout：等待加载超时时间，默认超时时间20s，若超时未加载完毕则抛出UIAError异常

返回值

无

示例1

from xbot import web


def main(args):
    browser = web.get('百度', None, 'chrome')
    browser.go_forward()
复制
该示例执行逻辑： 获取标题为 百度 的网页并前进

reload()
网页重新加载

reload(self, ignore_cache=False, load_timeout=20)

输入参数

ignore_cache：是否忽略缓存，默认为 False（不忽略）

load_timeout：等待加载超时时间，默认超时时间20s，若超时未加载完毕则抛出UIAError异常

返回值

无

示例1

from xbot import web


def main(args):
    browser = web.get('百度', None, 'chrome')
    browser.reload(True)
复制
该示例执行逻辑： 获取标题为 百度 的网页不忽略缓存重新加载

stop_load()
网页停止加载

stop_load(self)

输入参数

无

返回值

无

示例1

from xbot import web


def main(args):
    browser = web.get('百度', None, 'chrome')
    browser.stop_load()
复制
该示例执行逻辑： 获取标题为 百度 的网页并停止加载

is_load_completed()
判断网页是否加载完成

is_load_completed(self)

输入参数

无

返回值

bool：返回网页是否加载完成，完成返回 True，否则返回 False

示例1

from xbot import web


def main(args):
    browser = web.get('百度', None, 'chrome')
    is_load_completed = browser.is_load_completed()
复制
该示例执行逻辑： 获取标题为 百度 的网页并判断其是否加载完成

wait_load_completed()
等待网页加载完成

wait_load_completed(self, timeout=20)

输入参数

无

返回值

无

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    browser.wait_load_completed()
复制
该示例执行逻辑： 获取当前激活的窗口并等待其加载完成

close()
关闭网页

close(self)

输入参数

无

返回值

无

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    browser.close()
复制
该示例执行逻辑： 获取当前激活的窗口并关闭

execute_javascript()
在网页元素上执行JS脚本

execute_javascript(self, code, argument=None)

输入参数

code：要执行的JS脚本，必须为javascript函数形式

argument：要传入到JS函数中的参数，必须为字符串，如果需要传入其他类型可以先将其转为JSON字符串形式

返回值

Any：返回JS脚本执行结果

示例1

from xbot import web, print


def main(args):
    page = web.get_active()
    code = """
    function (context, args) {
            // context为null
            // args表示输入的参数
            return "hello " + args;
    }
    """
    js_result = page.execute_javascript(code, 'james')
    print(js_result) # 打印'hello james'
复制
该示例执行逻辑： 获取当前激活的网页 --> 在此页面上执行一段JS函数 --> 获取并打印其返回值

scroll_to()
鼠标滚动网页

scroll_to(self, location='bottom', behavior='instant', top=0, left=0)

输入参数

location：网页要滚动到的位置, 可以选择 'bottom'（滚动到底部）、'top'（滚动到顶部） 或 'point'（滚动到指定位置），默认滚动到底部

behavior：网页滚动效果，可以设置 'instant'（瞬间滚动） 或 'smooth'（平滑滚动），默认值为 'instant'（瞬间滚动）

top：滚动到指定位置的纵坐标

left：滚动到指定位置的横坐标

返回值

无

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    browser.scroll_to(location='bottom', behavior='smooth')
复制
该示例执行逻辑： 获取当前激活的网页 --> 使用鼠标平滑滚动网页至底部

示例2

from xbot import web


def main(args):
    browser = web.get_active()
    browser.scroll_to(location='point', behavior='smooth', top=100, left=100)
复制
该示例执行逻辑： 获取当前激活的网页 --> 使用鼠标平滑滚动网页至 top:100，left:100 的位置

handle_javascript_dialog()
处理网页对话框

handle_javascript_dialog(self, dialog_result='ok' , text=None, wait_appear_timeout=20)

输入参数

dialog_result：点击下载对话框中按钮。'ok'为确认下载 'cancel' 为取消下载

text：输入网页对话框的内容, 可为None

wait_appear_timeout：等待对话框出现超时时间, 默认20s, 如果下载对话框加载超时则抛出UIAError的异常

返回值

无

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    browser.handle_javascript_dialog('ok', text='helloword')
复制
该示例执行逻辑： 获取当前激活的网页 --> 处理当前网页的对话框，并将 helloword 填写到对话框中

get_javascript_dialog_text()
获取网页对话框内容(Chrome不支持此操作)

get_javascript_dialog_text(self, wait_appear_timeout=20)

输入参数

wait_appear_timeout：等待对话框出现超时时间, 默认20s, 如果下载对话框加载超时则抛出UIAError的异常

返回值

str：返回网页对话框的内容

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    content = browser.get_javascript_dialog_text()
复制
该示例执行逻辑： 获取当前激活的网页 --> 获取当前激活网页中的对话框内容

start_monitor_network()
开始监听网页请求(Chrome，ie不支持此操作)

start_monitor_network(self)

输入参数

无

返回值

无

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    browser.start_monitor_network()
    browser.reload()
    network_result_list = browser.get_responses(url='baidu',use_wildcard=False, resource_type='All')
    browser.stop_monitor_network()
复制
该示例执行逻辑： 获取当前激活的网页 --> 开始监听当前激活网页请求 --> 网页刷新 --> 获取请求结果 --> 停止监听网页请求

stop_monitor_network()
停止监听网页请求(Chrome，ie不支持此操作)

stop_monitor_network(self)

输入参数

无

返回值

无

示例1

开始监听当前激活网页请求，进而获取请求结果，最后停止监听网页请求

from xbot import web


def main(args):
    browser = web.get_active()
    browser.start_monitor_network()
    browser.reload()
    network_result_list = browser.get_responses(url='baidu',use_wildcard=False, resource_type='All')
    browser.stop_monitor_network()
复制
该示例执行逻辑： 获取当前激活的网页 --> 开始监听当前激活网页请求 --> 网页刷新 --> 获取请求结果 --> 停止监听网页请求

get_responses()
获取网页请求结果(Chrome，ie不支持此操作)

get_responses(self, url, use_wildcard=False,resource_type='All')

输入参数

url：资源路径Url

use_wildcard：是否使用通配符方式匹配, 默认为 False （模糊匹配, 如果为True则使用通配符方式匹配

resource_type：要过滤的网页请求结果类型, 默认为 'All'。包括All, XHR, Script, Style sheet, Image, Media, Font, Document, WebSocket, Manifest, TextTrack, Fetch, EventSource, Other

返回值

List[dict]：返回网页请求结果列表, 列表项为字典

示例1

获取当前激活网页中的对话框内容

from xbot import web


def main(args):
    browser = web.get_active()
    browser.start_monitor_network()
    browser.reload()
    network_result_list = browser.get_responses(url='baidu',use_wildcard=False, resource_type='All')
    browser.stop_monitor_network()
复制
该示例执行逻辑： 获取当前激活的网页 --> 开始监听当前激活网页请求 --> 网页刷新 --> 获取请求结果 --> 停止监听网页请求

wait_appear()
等待网页元素出现

wait_appear(self, selector_or_element, timeout=20)

输入参数

selector_or_element：要查找的选择器，支持两种格式——str类型（查找元素库中的元素）和Selector类型（在流程中已经获取过的网页元素对象）

timeout：等待网页元素出现超时时间, 默认超时时间20s

返回值

bool：返回网页元素是否出现，出现返回True，否则返回False

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    is_appear = browser.wait_appear('百度一下')
复制
该示例执行逻辑： 获取当前激活的网页 --> 等待当前激活的网页中出现与元素选择器 百度一下 匹配的网页元素出现

wait_disappear()
等待网页元素消失

wait_disappear(self, selector_or_element, timeout=20)

输入参数

selector_or_element：要查找的选择器，支持两种格式——str类型（查找元素库中的元素）和Selector类型（在流程中已经获取过的网页元素对象）

timeout：等待网页元素出现超时时间, 默认超时时间20s

返回值

bool：返回网页元素是否消失结果，消失返回True，否则返回False

示例1

等待当前激活的网页中与元素选择器 百度一下 匹配的网页元素消失

from xbot import web


def main(args):
    browser = web.get_active()
    is_disappear = browser.wait_disappear('百度一下')
复制
该示例执行逻辑： 获取当前激活的网页 --> 等待当前激活的网页中出现与元素选择器 百度一下 匹配的网页元素消失

find_all()
在当前网页中获取与选择器匹配的相似网页元素列表

find_all(self, selector, timeout=20)

输入参数

selector：要查找的选择器，支持两种格式——str类型（查找元素库中的元素）和Selector类型（在流程中已经获取过的网页元素对象）

timeout：获取网页相似元素列表超时时间，默认超时时间20s，匹配元素超时未找到则抛出UAIError异常

返回值

List[WebElement]：返回和目标元素相似网页元素列表

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    list_web_element = browser.find_all('百度一下')
复制
该示例执行逻辑： 获取当前激活的网页 --> 在当前激活的网页中获取与元素选择器 百度一下 匹配的所有元素的列表

find_all_by_css()
在当前网页中获取符合CSS选择器的网页元素列表

find_all_by_css(self, css_selector, timeout=20)

输入参数

css_selector：CSS选择器，字符串类型

timeout：获取网页相似元素列表超时时间，默认超时时间20s，匹配元素超时未找到则抛出UAIError异常

返回值

List[WebElement]：返回相似网页元素列表

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    list_web_element = browser.find_all_by_css('百度一下')
复制
该示例执行逻辑： 获取当前激活的网页 --> 在当前激活的网页中获取与CSS选择器 百度一下 匹配的全部网页元素列表

find_all_by_xpath()
在当前网页中获取符合Xpath选择器的网页元素列表

find_all_by_xpath(self, xpath_selector, timeout=20)

输入参数

xpath_selector：xpath字符串语法

timeout：获取网页相似元素列表超时时间，默认超时时间20s，匹配元素超时未找到则抛出UAIError异常

返回值

List[WebElement]：返回相似网页元素列表

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    list_web_element = browser.find_all_by_xpath('百度一下')
复制
该示例执行逻辑： 获取当前激活的网页 --> 在当前激活的网页中获取与Xpath选择器 百度一下 匹配的全部网页元素集合

find()
在当前网页中获取与选择器匹配的网页元素对象

find(self, selector, timeout=20)

输入参数

selector：要查找的选择器，支持两种格式——str类型（查找元素库中的元素）和Selector类型（在流程中已经获取过的网页元素对象）

timeout：获取网页相似元素列表超时时间，默认超时时间20s，匹配元素超时未找到则抛出UAIError异常

返回值

WebElement：返回目标网页元素对象

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    web_element = browser.find('百度一下')
复制
该示例执行逻辑： 获取当前激活的网页 --> 在当前激活的网页中获取与元素选择器 百度一下 匹配的元素并返回第一个

find_by_css()
在当前网页中获取符合CSS选择器的网页元素对象

find_by_css(self, css_selector, timeout=20)

输入参数

css_selector：CSS选择器，字符串类型

timeout：获取网页相似元素列表超时时间，默认超时时间20s，匹配元素超时未找到则抛出UAIError异常

返回值

WebElement：返回网页元素对象

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    web_element = browser.find_by_css('#su')
复制
该示例执行逻辑： 获取当前激活的网页 --> 在当前激活的网页中获取符合 id为su 的网页元素并返回第一个

find_by_xpath()
在当前网页中获取符合Xpath选择器的网页元素对象

find_by_xpath(self, xpath_selector, timeout=20)

输入参数

xpath_selector：xpath字符串语法

timeout：获取网页相似元素列表超时时间，默认超时时间20s，匹配元素超时未找到则抛出UAIError异常

返回值

WebElement：返回网页元素对象

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    web_element = browser.find_by_xpath('//*[@id="su"]')
复制
该示例执行逻辑： 获取当前激活的网页 --> 在当前激活的网页中获取与Xpath选择器 '//*[@id="su"]' 匹配的网页元素并返回第一个

is_element_displayed()
网页元素是否可见

is_element_displayed(self, selector)

输入参数

selector：要查找的选择器，支持两种格式——str类型（查找元素库中的元素）和Selector类型（在流程中已经获取过的网页元素对象）

返回值

bool：返回网页元素是否可见, 可见返回True，反之返回False

示例1

from xbot import web


def main(args):
    browser = web.get_active()
    is_displayed = browser.is_element_displayed('百度一下')
复制
该示例执行逻辑： 获取当前激活的网页 --> 在当前激活的网页中判断与元素选择器 百度一下 匹配的网页元素是否可见

extract_table()
获取选择器对应表格数据

*extract_table(self, table_selector, , exclude_thead=False, timeout=20)

输入参数

table_selector：要查找的表格选择器，支持两种格式——str类型（查找元素库中的数据表格元素）和TableSelector类型（在流程中已经获取过的数据表格元素对象）

exclude_thead：表格数据抓取多页时，只保留第一页抓取结果的表头。默认 Fasle，结果保留每页抓取的结果的表头（仅对表格元素生效）

timeout：获取网页相似元素列表超时时间，默认超时时间20s，匹配元素超时未找到则抛出UAIError异常

返回值

List：返回网页上与目标元素相似的元素列表

示例1

from xbot import web
def main(args):
    browser = web.get_active()
    # 整表抓取多页时，结果保留每页抓取结果的表头（仅对表格元素生效）
    table_list = browser.extract_table('数据表格',exclude_thead=False)
复制
from xbot import web
def main(args):
    browser = web.get_active()
    # 整表抓取多页时，结果只保留第一页抓取结果的表头（仅对表格元素生效）
    table_list = browser.extract_table('数据表格',exclude_thead=True)
复制
该示例执行逻辑： 获取当前激活的网页 --> 在当前激活的网页中获取与表格选择器 数据表格 匹配的元素列表